{"name":"Tcs mail node client","tagline":"TCS mail - node client","body":"# TCS E-Mail Node Client\r\n\r\n---\r\n\r\nThis document describes the client module for the TCS e-mail service.  \r\nIt is designed to simplify the requests to the service and provides a usable and expendable interface to integrate the service as easy as possible.\r\n\r\n###Note:\r\n\r\n- Regular mail **attachments** to mails are **not possible** because the mails will be signed via the DomainKeys Identified Mail (DKIM) Standard.\r\n- **Images** within the html need to be defined **as link**. **Base64** images via styles are **not valid**.\r\n\r\n## `MailFactory`\r\n\r\n### Initialize\r\n\r\n#### `new MailFactory( appid [, config ] )`\r\n\r\nCreates the mail factory to send mail via the tcs mail service.\r\n\r\n**arguments**\r\n\r\n* `appid` *( String )*: The app id to send mails.\r\n* `config` *( Object [ optional ] )*: Configuration object.<a id=\"factoryconfig\"></a>\r\n* `config.sendermail` *( String )*: The sender address. This could also be defined in server based on the `appid`\r\n* `config.endpoint` *( String [ optional; default = \"http://node.tcs.de/email/send\" ] )*: The url to the tcs mail service.\r\n* `config.security` *( Object [ optional; default = {} ] )*: If there are some security credentials within your configuration put them here. Usually Security is done by a `apikey` key or by using an ip filter within the server.\r\n* `config.returnPath` *( String [ optional; default = \"bounces@tcs.de\" ] )*: Adress for returning mails.\r\n* `config.from` *( String [ optional; default = @sendermail ] )*: Usually this will be the sender mail. But it's possible to us a human friendly naming.\r\n* `config.reply` *( String | Array )*: A single reply address or an array of multiple addresses as standard reply. This could be overwritten by `Mail.reply( mails )`* \r\n* `config.charset` *( String [ optional; default = \"utf-8\" ] )*: General charset. Changing this config will effect all charset configurations.\r\n* `config.charsetHtml` *( String [ optional; default = \"utf-8\" ] )*: Html charset. Will only be send to server if not `utf-8`\r\n* `config.charsetText` *( String [ optional; default = \"utf-8\" ] )*: Html charset. Will only be send to server if not `utf-8`\r\n* `config.charsetSubject` *( String [ optional; default = \"utf-8\" ] )*: Html charset. Will only be send to server if not `utf-8`\r\n* `config.simulate` *( Boolean [ optional; default = false] )*: This is just a switch to prevent the final send to the mail service. It's been used to test the module. With this switch you can also turn of mail sending within your dev environment.\r\n\r\n**TODO** Template configuraton\r\n\r\n* `config.tmplLanguage` *( String [ optional ] )*: A standard language string like `de_DE` or `en_US` to define the language for using the template. \r\n* `config.tmplPath` *( String [ optional ] )*: … \r\n* `config.tmplType` *( String [ optional ] )*: … \r\n\r\n### Methods\r\n\r\n#### `.config( config )`\r\n\r\nChange the configuration in operating.\r\n\r\n**arguments**\r\n\r\n* `config` *( Object [ optional ] )*: Configuration object. Details see [factory config](#factoryconfig)\r\n\r\n**Return**\r\n\r\n*( Object )*: the current configuration\r\n\r\n#### `.create()`\r\n\r\ncreate and return a new `Mail` object. This is used to define the receivers content and at least send the email.\r\n\r\n**Return**\r\n\r\n*( Mail )*: The Mail object as described [here](#mailobj) \r\n\r\n#### `.get( id )`\r\n\r\nget a single mail object.\r\n\r\n**arguments**\r\n\r\n* `id` *( String )*: The mail id.\r\n\r\n**Return**\r\n\r\n*( Mail )*: A `Mail` object.\r\n\r\n#### `.count()`\r\n\r\nget the count of open send mails in factory.\r\n\r\n**Return**\r\n\r\n*( Number )*: The count\r\n\r\n\r\n#### `.each( iterator )`\r\n\r\nLoop through all mail objects. \r\n\r\n**arguments**\r\n\r\n* `iterator` *( Function )*: Iteration method with the arguments\r\n\r\n**example**\r\n\r\n```\r\nMailFactory.each ( id, mailObj )->\r\n\t...\r\n```\r\n\r\n#### `.sendAll( callback )`\r\n\r\nSend all open Mails.\r\n\r\n**arguments**\r\n\r\n* `callback` *( Function )*: Callback method called after all mails has been send.\r\n\r\n## `Mail` Object methods<a id=\"mailobj\"></a>\r\n\r\nThe `Mail` object can be generated by the `MailFactory.mail()` Method.\r\nWithin this object you can define all option by using the according method.\r\n\r\nIf all options has been set you have to call the `.send()` method to send the mail via the tcs mail service.\r\n\r\n### Properties\r\n\r\n#### `Mail.id`\r\n\r\n*( String )*\r\n\r\nEvery mail will get a unique id to be able predefine a lot of mails and send them in bulk.\r\n\r\n#### `Mail.created`\r\n\r\nTimestamp the `Mail` object has been created. Just to be able to destroy outdated mails later.\r\n\r\n### Methods\r\n\r\n#### `Mail.to( mails )`\r\n\r\nSet the main **TO** addresses. If set to `false` the current **TO** will be cleared.\r\n\r\n**NOTE: At least one mail in `to`, `cc` or `bcc` has to be set.**\r\n\r\n**arguments**\r\n\r\n* `mails` *( String | Array )*: A single receiver address or an array of multiple receivers.\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.cc( mails )`\r\n\r\nSet the **CC** addresses. If set to `false` the current **CC** will be cleared\r\n\r\n**NOTE: At least one mail in `to`, `cc` or `bcc` has to be set.**\r\n\r\n**arguments**\r\n\r\n* `mails` *( String | Array )*: A single receiver address or an array of multiple receivers.\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.bcc( mails )`\r\n\r\nSet the **BCC** addresses. If set to `false` the current **BCC** will be cleared\r\n\r\n**NOTE: At least one mail in `to`, `cc` or `bcc` has to be set.**\r\n\r\n**arguments**\r\n\r\n* `mails` *( String | Array )*: A single receiver address or an array of multiple receivers.\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.subject( subject [, charset ] )`\r\n  \r\nSet the subject of this mail.\r\n\r\n**NOTE: This subject has to be set. otherwise an error will be thrown during send**\r\n\r\n**arguments**\r\n\r\n* `mails` *( String )*: A subject string to describe the content of this mail\r\n* `charset` *( String [ optional, default=config.charsetSubject ] )*: Overwrite default charset\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.reply( mails )`\r\n\r\nThe Reply addresses the mail answers will send to. If set to `false` the current **REPLY** will be cleared.  \r\nIf this method is not used the standard from `MailFactory.config.reply` will be used.\r\n\r\n**arguments**\r\n\r\n* `mails` *( String | Array )*: A single receiver address or an array of multiple receivers.\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.returnPath( mail )`\r\n\r\nThe return address failed mails will bounce to.\r\nIf this method is not used the standard from `MailFactory.config.returnPath` will be used.\r\n\r\n**arguments**\r\n\r\n* `mails` *( String )*: A single return address.\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.html( source [, charset ] )`\r\n\r\nThe raw mail html source to send.\r\n\r\n**arguments**\r\n\r\n* `source` *( String )*: Mail html source.\r\n* `charset` *( String [ optional, default=config.charsetHtml ] )*: Overwrite default charset\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.text( text [, charset ] )`\r\n\r\nThe raw mail text to send.\r\n\r\n**arguments**\r\n\r\n* `source` *( String )*: Mail html source.\r\n* `charset` *( String [ optional, default=config.charsetHtml ] )*: Overwrite default charset\r\n\r\n**Return**\r\n\r\n*( Mail )*: The `Mail` object self for chaining.\r\n\r\n#### `Mail.tmpl( tmplName, data [, language, type ] )`\r\n\r\n**Template handling ( TODO )**\r\n\r\n- Should set html and text at once if defined.\r\n- Should handle the language\r\n\r\n#### `Mail.send( callback )`\r\n\r\nSend this mail. If there is some missing data a error will be returned.\r\nafter a successful send the `Mail` object will be destroyed automatically.\r\n\r\n**arguments**\r\n\r\n* `callback` *( Function )*: Called after the mail has been send.\r\n\r\n#### `Mail.destroy()`\r\n\r\nDestroy the `Mail` object. \r\n\r\n## Example\r\n\r\nThis is a simple example to send a mail.\r\n\r\n```coffee\r\n# create the factory\r\nmailFactory = new MailFactory( \"wmshop\" )\r\n\r\n# create a mail object\r\nmail = mailFactory.create()\r\n\r\n# set the data\r\nmail.to( \"abc@tcs\" ).cc( [ \"ghi@tcs.de\", \"def@tcs.de\" ] )\r\n\r\nmail.subject( \"Test\" )\r\n\r\nmail.html( \"<h1>My Test Mail</h1><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.</p>\" )\r\n\r\nmail.text( \"My Test Mail\\n\\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.\" )\r\n\r\n# send the mail\r\nmail.send ( err )=>\r\n\tif err\r\n\t\tconsole.error( err ) \r\n\t\treturn\r\n\tconsole.log( \"SUCCESS\" )\r\n\treturn\r\n```\r\n\r\n## Changelogs\r\n\r\n### 0.1.1 `21. June 2013`\r\n\r\n* implemented handling of apikey security credentials\r\n* updated tests to load special factory configs\r\n* added grunt mocha test module\r\n\r\n## TODOS\r\n\r\n- Implement a template handling solution to automatically generate the subject, html and/or text for a specific language by just call `Mail.tmpl(…).to(…).send( -> )`\r\n\r\n## Ideas\r\n\r\n- Add Attachments as S3 link\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}